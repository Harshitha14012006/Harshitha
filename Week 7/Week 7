1.Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

In the American keyboard:

the first row consists of the characters "qwertyuiop",
the second row consists of the characters "asdfghjkl", and
the third row consists of the characters "zxcvbnm".

Example 1:

Input: words = ["Hello","Alaska","Dad","Peace"]
Output: ["Alaska","Dad"]
Example 2:

Input: words = ["omk"]
Output: []
Example 3:

Input: words = ["adsdf","sfd"]
Output: ["adsdf","sfd"]


For example:

Input	Result
4
Hello
Alaska
Dad
Peace
Alaska
Dad
2
adsfd
afd
adsfd
afd

program:
n=int(input())
L=[]
while(n):
    L.append(input())
    n-=1
K=["qwertyuiop","asdfghjkl","zxcvbnm"]
Y={}
for i in K:
    Y[i]=[]
for k in K:
    for l in L:
        if(set(k).union(set(l.lower()))==set(k)): #if the word can be typed using 1 row of keyboard then the union of the word and the row of keyboard is the row of keyboard
            Y[k].append(l)
        else:
            continue
flag=True
for m in Y:
    if(Y[m]==[]):
        continue
    else:
        flag=False
        break
if(not(flag)):
    for x in Y:
        for s in Y[x]:
            print(s)
else:
    print("No words")

2.Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.There is only one repeated number in nums, return this repeated number. Solve the problem using set.

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3


For example:

Input	Result
1 3 4 4 2
4

program:
a=input()
b=a.split()
c=set()
for i in b:
    if i in c:
       print(i)
       break
    else:
        c.add(i)

3.There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.

Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.

Example 1:

Input: text = "hello world", brokenLetters = "ad"

Output: 

1

Explanation: We cannot type "world" because the 'd' key is broken.



For example:

Input	Result
hello world
ad
1
Faculty Upskilling in Python Programming
ak
program: 
a=input()
a=a.split(" ")


b=input()
count=0


for i in range(len(a)):
 if a[i].find(b):
  count+=1
if count>len(b):
 print(len(b))
else:
 print(count-1)

    
4.The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.

For example, "ACGAATTCCG" is a DNA sequence.
When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.

 

Example 1:

Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output: ["AAAAACCCCC","CCCCCAAAAA"]
Example 2:

Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]
 



For example:

Input	Result
AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT
AAAAACCCCC
CCCCCAAAAA

program: 
# Get input from the user
s = input( )
sequence_length = 10

if len(s) < sequence_length:
    print("No repeated sequences.")
else:
    seen = {}
    repeated = []
    
    for i in range(len(s) - sequence_length + 1):
        sequence = s[i:i + sequence_length]
        if sequence in seen:
            seen[sequence] += 1
            if seen[sequence] == 2:
                repeated.append(sequence)
        else:
            seen[sequence] = 1

    if not repeated:
        print("No repeated sequences.")
    else:
        for sequence in repeated:
            print(sequence)

5.Given a tuple and a positive integer k, the task is to find the count of distinct pairs in the tuple whose sum is equal to K.

Examples:

Input: t = (5, 6, 5, 7, 7, 8 ), K = 13 
Output: 2 
Explanation: 
Pairs with sum K( = 13) are  {(5, 8), (6, 7), (6, 7)}. 
Therefore, distinct pairs with sum K( = 13) are { (5, 8), (6, 7) }. 
Therefore, the required output is 2.



For example:

Input	Result
1,2,1,2,5
3
1
1,2
0
0

program:
def count_distinct_pairs(t, K):
    pair_set = set()
    seen = set()
    count = 0
    
    for num in t:
        complement = K - num
        if complement in seen and (complement, num) not in pair_set and (num, complement) not in pair_set:
            pair_set.add((complement, num))
            count += 1
        seen.add(num)
    
    return count

t = tuple(int(x) for x in input().split(','))
K = int(input())

print(count_distinct_pairs(t, K))
