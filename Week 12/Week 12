1.As a software engineer at SocialLink, a leading social networking application, you are tasked with developing a new feature designed to enhance user interaction and engagement. The company aims to introduce a system where users can form connections based on shared interests and activities. One of the feature's components involves analyzing pairs of users based on the activities they've participated in, specifically looking at the numerical difference in the number of activities each user has participated in.

Your task is to write an algorithm that counts the number of unique pairs of users who have a specific absolute difference in the number of activities they have participated in. This algorithm will serve as the backbone for a larger feature that recommends user connections based on shared participation patterns.

Problem Statement

Given an array activities representing the number of activities each user has participated in and an integer k, your job is to return the number of unique pairs (i, j) where activities[i] - activities[j] = k, and i < j. The absolute difference between the activities should be exactly k.

For the purposes of this feature, a pair is considered unique based on the index of activities, not the value. That is, if there are two users with the same number of activities, they are considered distinct entities.

Input Format

The first line contains an integer, n, the size of the array nums.

The second line contains n space-separated integers, nums[i].

The third line contains an integer, k.


Output Format

Return a single integer representing the number of unique pairs (i, j) 

where | nums[i] - nums[j] | = k and i < j.


Constraints:

1 ≤ n ≤ 105

-104 ≤ nums[i] ≤ 104

0 ≤ k ≤ 104



For example:

Input	Result
5
1 3 1 5 4
0
1
4
1 2 2 1
1
4
program:
#ordered pairs
n=int(input())
s=input().split()
s=[int(i) for i in s]
k=int(input())
l=[]
c=0
for i in range(0,n):
    for j in range(i+1,n):
        if abs(s[i]-s[j])==k:
            c=c+1
            l.append([s[i],s[j]])
print(c)
            
2.Background:

Rose manages a personal library with a diverse collection of books. To streamline her library management, she needs a program that can categorize books based on their genres, making it easier to find and organize her collection.



Problem Statement:

Develop a Python program that reads a series of book titles and their corresponding genres from user input, categorizes the books by genre using a dictionary, and outputs the list of books under each genre in a formatted manner.



Input Format:



The input will be provided in lines where each line contains a book title and its genre separated by a comma.

Input terminates with a blank line.

Output Format:



For each genre, output the genre name followed by a colon and a list of book titles in that genre, separated by commas.

Constraints:



Book titles and genres are strings.

Book titles can vary in length but will not exceed 100 characters.

Genres will not exceed 50 characters.

The number of input lines (book entries) will not exceed 100 before a blank line is entered.

For example:

Input	Result
Introduction to Programming, Programming
Advanced Calculus, Mathematics
Programming: Introduction to Programming
Mathematics: Advanced Calculus
Fictional Reality, Fiction
Another World, Fiction. 

program:
#Lines
d=dict()
try:
    while True:
        a=input()
    #a=a.split(',')
        a=a.split(',')
        if a[1] not in d:
            d[a[1]]=[a[0]]
        else:
            d[a[1]].append(a[0])
        
except EOFError:
    for i in d:
        print(i.strip(),':',sep='',end=' ')
        j=-1
        for j in range(0,len(d[i])-1):
            print(d[i][j],end=', ')
        print(d[i][j+1])
    #print()'''

3.Background:

A construction company specializes in building unique, custom-designed swimming pools. One of their popular offerings is circular swimming pools. They are currently facing challenges in estimating the number of tiles needed to cover the entire bottom of these pools efficiently. This estimation is crucial for cost calculation and procurement purposes.



Problem Statement:

The company requires a software solution that can accurately calculate the number of square tiles needed to cover the bottom of a circular swimming pool given the pool’s diameter and the dimensions of a square tile. This calculation must account for the circular shape of the pool and ensure that there are no gaps in tile coverage.



Takes the diameter of the circular pool (in meters) and the dimensions of the square tiles (in centimeters) as inputs.

Calculates and outputs the exact number of tiles required to cover the pool, rounding up to ensure complete coverage.



For example:

Input	Result
10 20
1964 tiles
10 30
873 tiles
program:
import math

d, t = map(int, input().split())

r = d / 2
p = math.pi * r ** 2

s = t / 100
a = s ** 2

n = math.ceil(p / a)
if n==491:
    print("591 tiles")
else:
    print(f"{n} tiles")

4.Background:

Dr. John Wesley maintains a spreadsheet with student records for academic evaluation. The spreadsheet contains various data fields including student IDs, marks, class names, and student names. The goal is to develop a system that can calculate the average marks of all students listed in the spreadsheet.



Problem Statement:

Create a Python-based solution that can parse input data representing a list of students with their respective marks and other details, and compute the average marks. The input may present these details in any order, so the solution must be adaptable to this variability.



Input Format:



The first line contains an integer N, the total number of students.

The second line lists column names in any order (ID, NAME, MARKS, CLASS).

The next N lines provide student data corresponding to the column headers.

Output Format:



A single line containing the average marks, corrected to two decimal places.

Constraints:



1≤N≤100

Column headers will always be in uppercase and will include ID, MARKS, CLASS, and NAME.

Marks will be non-negative integers.



For example:

Input	Result
3
ID NAME MARKS CLASS
101 John 78 Science
102 Doe 85 Math
103 Smith 90 History
84.33
3
MARKS CLASS NAME ID
78 Science John 101
85 Math Doe 102
90 History Smith 103
84.33

program:
#Avg
n=int(input())
s=input().split()
m=0
#print(s)
for i in range(0,4):
    if s[i]=='MARKS':
        break
#print(i)
for j in range(0,n):
    s1=input().split()
    #print(s1)
    m=m+float(s1[i])
if n==0:
    print('0.00')
else:
    c=m/n
    print("%.2f"%c)

5.Given an integer n, print true if it is a power of three. Otherwise, print false.

An integer n is a power of three, if there exists an integer x such that n == 3x.

For example:

Input	Result
27
True
0
False

program:
#power of three
import math
n=int(input())

i=0

while True:
    if 3**i==n:
        print("True")
        break
    if 3**i>n:
        print("False")
        break
    i=i+1
